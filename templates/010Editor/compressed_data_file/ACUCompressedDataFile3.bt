//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
local int i;
struct {
    struct {
        struct {
            byte compressedChunkMarker[8];  // 33 AA FB 57 99 FA 04 10
            int16 unk1;
            byte compressionType;
            uint16 minSize;
            uint16 maxSize;
        } RawChunkHeader;
        if (RawChunkHeader.maxSize > 0){
            struct {
                int32 compressedBlockCount;
                struct {
                    uint16 uncompressedSize;
                    uint16 compressedSize;
                } BlockIndex[compressedBlockCount];
                for ( i = 0; i < compressedBlockCount; i++ ){
                    struct {
                        int32 checksumPossibly;
                        byte compressedData[BlockIndex[i].compressedSize];
                    } CompressedDataChunk;
                }
            } CompressedData;
        } else {
            while (FTell() != FileSize() && ReadByte() != 51){
                struct {
                    byte compressed;
                    if (compressed == 0){
                        struct {
                            int32 size;
                            byte data[size];
                        } DataChunk;  // not compressed
                    } else if (compressed == 1){
                        struct {
                            int32 compressedSize;
                            int32 uncompressedSize;
                            int32 unk;
                            byte compressedData[compressedSize];
                        } CompressedDataChunk;
                    } else {
                        Exit(11);
                    }
                } CompressedData;
            }
        }
    } ForgeRawDataSection;
} ForgeRawData;

// if maxSize > 0 read another ForgeRawData
